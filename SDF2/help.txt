1. Classes:

Flashcard: (Base class)

Attributes: None
Methods:
virtual string getQuestion() const = 0; (pure virtual)
virtual bool checkAnswer(const string& answer) const = 0; (pure virtual)
Destructor

StandardFlashcard: (Inherits from Flashcard)
Attributes: string question, string answer
Methods:
string getQuestion() const override; (overrides base class)
bool checkAnswer(const string& answer) const override; (overrides base class)

BothSideFlashcard: (Inherits from Flashcard)
Attributes: string side1, string side2
Methods:
string getQuestion() const override; (overrides base class) - Randomly choose side1 or side2
bool checkAnswer(const string& answer) const override; (overrides base class) - Check answer against both sides

TrueFalseFlashcard: (Inherits from Flashcard)
Attributes: string statement, bool isTrue
Methods:
string getQuestion() const override; (overrides base class)
bool checkAnswer(const string& answer) const override; (overrides base class) - Check answer as true/false

Deck:
Attributes: string code, vector<Flashcard*> flashcards
Methods:
string getCode() const;
void addFlashcard(Flashcard* card);
bool saveToFile(const string& filename) const; - Use file streams to write flashcards in a specific format
bool loadFromFile(const string& filename); - Use file streams to read flashcards from the format defined in saveToFile
void quiz() const; - Loop through flashcards, call getQuestion and checkAnswer methods

2. Templates:

Consider using a template for a generic FileHandler class. This class can have common methods for opening, closing, and reading/writing files, taking a template parameter for the data type being handled (e.g., FileHandler<Flashcard>).
3. Inheritance:

The Flashcard class hierarchy uses inheritance to define common behaviors for all flashcards (getting the question and checking the answer) while allowing specific implementations for different types (standard, both-side, true/false) through derived classes.
4. File Handling:

The Deck class uses file handling to save and load flashcards.
You can use file streams (ifstream, ofstream) to write information about each flashcard (type, question, answer) to a file in a chosen format (e.g., comma-separated values) during saveToFile.
Similarly, in loadFromFile, read each line of the file, parse the information based on the chosen format, and create the appropriate Flashcard object (using the correct derived class) before adding it to the deck's flashcards vector.
5. Program Structure:

The top level can have a main function responsible for creating a FlashcardApp object and calling its start method.
The FlashcardApp class should manage the overall flow, including:
Presenting the main menu and handling user choices.
Creating and managing Deck objects.
Calling appropriate methods from Deck class for functionalities like loading/saving decks, adding flashcards, and starting quizzes.
